======================
pygccxml documentation
======================

.. contents:: Table of contents

.. meta::
   :description: C++ declarations parser
   :keywords: C++, source code, header file, parser, UML, free, declarations
              , XML, class hierarchy, analyze, AST, code generator, 
              , синтаксический анализатор, исходный текст, исходная программа
              , описание, определение, иерархия классов, генератор кода
   
------------
Introduction
------------
.. include:: ./definition.rest

----------------------
What can I do with it?
----------------------
Using `pygccxml`_ you can:

* parse C++ source code
* build a code generator

    + `Py++`_ is heavily based on `pygccxml`_
    + generate `WSDL`_ file from sources 
    + ...    

* create UML diagrams
* build code analyzer
* ...
    
-------------
Usage example
-------------
First of all let's see a small and simple `example`_. This example prints all 
declarations, reported by `GCC-XML`_ after parsing `example.hpp`_ file. Also it 
prints all classes, and for every class it will print it's base and derived 
classes. It was simple task, right? If you are still curious how it looks 
"in the real life", I mean how xml file is look like, you may look at the 
`original XML file`_ generated by `GCC-XML`_.

.. _`original XML file` : ./example.hpp.xml.html
.. _`example.hpp` : ./example.hpp.html
.. _`example` : ./example.py.html

--------
Features
--------

Caching
-------

Consider the following situation: you have to parse the same set of files every 
day. There are 2 possible ways to complete the task:

* create a header file that includes all files you need to parse

* parse each file separately and then join the results

The difference between these approaches is the caching algorithm used in the 
second case. `pygccxml`_ supports both of them. 

Type traits
-----------

`pygccxml`_ provides a lot of functionality to analyze C++ types and relationship
between them. For more information please refer to `design`__ document or API 
documentation. Just a few names of algorithms:

* ``is_convertible( from, to )``

  returns ``True`` if there is a conversion from type ``from`` to type ``to``, 
  otherwise ``False``
  
* ``is_unary_operator( oper )``

  returns ``True`` if ``oper`` describes unary operator
  
.. __: ./design.html


Query interface
---------------

`pygccxml`_ provides simple and powerful API to query declarations tree. I will
try to give small example, that will prove my point. If you want to know more 
about provided API please read `query interface`__ document or API documentation.
Examples:

.. code-block:: Python

  #global_ns is the reference to declarations that describes C++ namespace.
  #In our case, instance of that declarations describes global ( :: ) namespace.
  global_ns.free_functions( "do_smth", return_type='void', arg_types=[None,'int'] )
  

Small explanation. Assume that ``None`` means "any type". Now the code is pretty
readable: 

::

  select all free functions from the project
  where 
      name equal to "do_smth"
      return type is void
      function has two arguments
      second argument type is int

.. __: ./query_interface.html

-------
License
-------

`Boost Software License`_. 

-----------------
Test environments
-----------------

`pygccxml`_ comes with comprehensive unit tests. It is running on Windows XP and 
`Ubuntu`_. I am using `Python`_ 2.4 and `GCC-XML`_ CVS.
Right now I am running more then 150 tests. They test almost every piece of code. 
Also I have performance tests. Most of the time I am using "white box" testing 
strategy.

.. _`WSDL`: http://www.w3.org/TR/wsdl
.. _`Py++`: ./../pyplusplus/pyplusplus.html
.. _`pygccxml`: ./pygccxml.html
.. _`SourceForge`: http://sourceforge.net/index.php
.. _`Docutils`: http://docutils.sourceforge.net
.. _`Python`: http://www.python.org
.. _`GCC-XML`: http://www.gccxml.org
.. _`Boost Software License`: http://boost.org/more/license_info.html
.. _`Ubuntu`: http://www.ubuntu.com/
.. _`boost::type_traits` : http://www.boost.org/libs/type_traits/index.html
..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
